#!/usr/bin/env bash

source ./elilib/build

cmdname=$(basename $0)

function print_help {
  echo "$cmdname - Easy linux installation management"
  echo " "
  echo "Usage:"
  echo "  $cmdname [options] build [build options] ./elifile1 ./a/elifile2 ..."
  echo "  $cmdname"
  echo " "
  echo "OPTIONS:"
  echo "  -c, --no-clean      prevent clean of intermediate container after"
  echo "                      exit (default: false)"
  echo "  -e, --no-exit       prevent elifile exit on error (default: false)"
  echo "  -h, --help          print this menu"
  echo "  -p, --no-print-cmds print command before executing it (default: true)"
  echo "  -s, --no-squash     squash all of the new image's layers (including those"
  echo "                      inherited from a base image) into a single new layer"
  echo "                      (default: false)"
}

if [ $# -eq 0 ]; then
  echo "error: missing elifile path"
  print_help
  exit 1
fi

print_cmd=${print_cmd:-true}
clean=${clean:-true}
exit=${exit:-true}
squash=${squash:-true}

# Parse global flags
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
      ;;

    -p|--no-print-cmds)
      shift
      print_cmd="false"
      ;;

    -c|--no-clean)
      shift
      clean="false"
      ;;

    -e|--no-exit)
      shift
      exit="false"
      ;;

    -s|--no-squash)
      shift
      squash="false"
      ;;

    *)
      break
      ;;
  esac
done

# Apply options adds options to the given elifile ($1) script
function apply_options {
  # Handle --no-exit
  if [ "$exit" != "false" ]; then
    cat <<EOF >> $1
# Exit if one command return a non zero exit code
set -e
EOF
  fi

  # cleanup function
  cat <<EOF >> $1
function cleanup {
EOF

  # Handle --no-clean
  if [ "$clean" == "true" ]; then
    cat <<EOF >> $1
  # Delete the container
  buildah rm \$ctr
EOF
  fi

  # end of cleanup function
  cat <<EOF >> $1

  # Delete this file
  rm -f $1
}

trap cleanup EXIT
EOF

  # Handle --no-print-cmds
  if [ "$print_cmd" != "false" ]; then
    cat <<EOF >> $1
# Print commands
set -x
EOF
  fi
}

function exec_elifile {
  if [ $# -eq 0 ]; then
    log_fatal "internal error: missing elifile args"
    exit 100
  fi
  
  elifile_src="$1"
  argfile="$(mktemp)"
  _eli_args_csv_headers > "$argfile"
  
  source "$elifile_src"
  elifile_args >> "$argfile"

  _eli_print_args "$argfile"

  elifile="$(mktemp)"
  apply_options "$elifile"

  # Append elifile to tmp elifile
  cat $1 >> "$elifile"

  rm -f "$elifile"
  rm -f "$argfile"
}

# Build files
while test $# -gt 0; do
  elifile="$(realpath $1)"
  shift
  if [ ! -f "$elifile" ]; then
    log_fatal "Unknown file or option: $1"
  fi

  exec_elifile $elifile
done
