#!/usr/bin/env bash

parent_dir="$(dirname $(readlink -e $0))"
source "$ELI_PATH/lib/log"
source "$ELI_PATH/lib/traps"

set -e
trap exit_trap EXIT

function print_help {
  cat <<EOF
Build OCI images using efifiles or Dockerfiles

USAGE:
  eli build my/efifile my/efifile2 [elifile options] -- [buildah commit options]
  eli build my/Dockerfile my/Dockerfile2 [buildah build options]

OPTIONS:
  -h, --help           print this menu

ELIFILE OPTIONS:

BUILDAH COMMIT OPTIONS:
EOF
  # Extract flags of buildah commit command
  buildah commit -h | tail -n+$(buildah commit -h | \
    egrep -n "^\s+(-\w|--\w)" | head -n 1 | cut -d ':' -f 1)

  cat <<EOF
BUILDAH BUILDOPTIONS:
EOF
  # Extract flags of buildah build command
  buildah build -h | tail -n+$(buildah build -h | \
    egrep -n "^\s+(-\w|--\w)" | head -n 1 | cut -d ':' -f 1)
}

function is_dockerfile {
  file="$1"

  # Dockerfile first non empty, non comment line must start with FROM
  egrep -v '^#' < "$file" | egrep -v "^$" | head -n 1 | egrep "^\s*FROM " 2>&1 >/dev/null

  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

function main {
  declare -A files
  declare -a options

  # Parse build command options
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        print_help
        exit 0
        ;;

      *)
        break
        ;;
    esac
  done


  # Parse buildah commit or buildah build options
  while [ $# -gt 0 ]; do
    case "$1" in
      -*|--.*)
        options+=("$1")
        shift

        # Flag value
        if [ "$1" != "" ] && [ "${1:0:1}" != "-" ]; then
          options+=("$1")
          shift
        fi
        ;;
      
      *)
        if [ "${#options[@]}" != "0" ]; then
          log_error "files $1 is placed after options \"${options[@]}\", options must be placed after files"
          exit 1
        fi

        files["$1"]="1"
        shift
        ;;
    esac
  done

  if [ "${#files[@]}" = "0" ]; then
    log_error "no file to build specified"
    exit 1
  fi

  for file in "${!files[@]}"; do
    if [ ! -f "$file" ]; then
      log_error "build $file: no such file"
      exit 1
    fi

    if [ "$(is_dockerfile $file)" = "true" ]; then
      source "$parent_dir/dockerfile" $file ${options[@]} || exit $?
    else
      source "$parent_dir/elifile" $file ${options[@]} || exit $?
    fi

    if [ "$?" != "0" ]; then
      log_error "build of $file failed"
      stacktrace="false"
      exit $?
    fi
  done
}

main "$@"